// @ts-nocheck
// @generated by protobuf-ts 2.5.0 with parameter long_type_string
// @generated from protobuf file "evmos/inflation/v1/genesis.proto" (package "evmos.inflation.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MESSAGE_TYPE } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'
import { InflationDistribution } from './inflation'
import { ExponentialCalculation } from './inflation'
/**
 * GenesisState defines the inflation module's genesis state.
 *
 * @generated from protobuf messages evmos.inflation.v1.GenesisState
 */
export interface GenesisState {
  /**
   * params defines all the paramaters of the module.
   *
   * @generated from protobuf field: evmos.inflation.v1.Params params = 1;
   */
  params?: Params
  /**
   * amount of past periods, based on the epochs per period param
   *
   * @generated from protobuf field: uint64 period = 2;
   */
  period: string
  /**
   * inflation epoch identifier
   *
   * @generated from protobuf field: string epoch_identifier = 3;
   */
  epochIdentifier: string
  /**
   * number of epochs after which inflation is recalculated
   *
   * @generated from protobuf field: int64 epochs_per_period = 4;
   */
  epochsPerPeriod: string
  /**
   * number of epochs that have passed while inflation is disabled
   *
   * @generated from protobuf field: uint64 skipped_epochs = 5;
   */
  skippedEpochs: string
}
/**
 * Params holds parameters for the inflation module.
 *
 * @generated from protobuf messages evmos.inflation.v1.Params
 */
export interface Params {
  /**
   * type of coin to mint
   *
   * @generated from protobuf field: string mint_denom = 1;
   */
  mintDenom: string
  /**
   * variables to calculate exponential inflation
   *
   * @generated from protobuf field: evmos.inflation.v1.ExponentialCalculation exponential_calculation = 2;
   */
  exponentialCalculation?: ExponentialCalculation
  /**
   * inflation distribution of the minted denom
   *
   * @generated from protobuf field: evmos.inflation.v1.InflationDistribution inflation_distribution = 3;
   */
  inflationDistribution?: InflationDistribution
  /**
   * parameter to enable inflation and halt increasing the skipped_epochs
   *
   * @generated from protobuf field: bool enable_inflation = 4;
   */
  enableInflation: boolean
}
// @generated messages type with reflection information, may provide speed optimized methods
class GenesisState$Type extends MessageType<GenesisState> {
  constructor() {
    super('evmos.inflation.v1.GenesisState', [
      {
        no: 1,
        name: 'params',
        kind: 'message',
        T: () => Params,
        options: { 'gogoproto.nullable': false },
      },
      { no: 2, name: 'period', kind: 'scalar', T: 4 /*ScalarType.UINT64*/ },
      {
        no: 3,
        name: 'epoch_identifier',
        kind: 'scalar',
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 4,
        name: 'epochs_per_period',
        kind: 'scalar',
        T: 3 /*ScalarType.INT64*/,
      },
      {
        no: 5,
        name: 'skipped_epochs',
        kind: 'scalar',
        T: 4 /*ScalarType.UINT64*/,
      },
    ])
  }
  create(value?: PartialMessage<GenesisState>): GenesisState {
    const message = {
      period: '0',
      epochIdentifier: '',
      epochsPerPeriod: '0',
      skippedEpochs: '0',
    }
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    })
    if (value !== undefined)
      reflectionMergePartial<GenesisState>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GenesisState,
  ): GenesisState {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* evmos.inflation.v1.Params params */ 1:
          message.params = Params.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.params,
          )
          break
        case /* uint64 period */ 2:
          message.period = reader.uint64().toString()
          break
        case /* string epoch_identifier */ 3:
          message.epochIdentifier = reader.string()
          break
        case /* int64 epochs_per_period */ 4:
          message.epochsPerPeriod = reader.int64().toString()
          break
        case /* uint64 skipped_epochs */ 5:
          message.skippedEpochs = reader.uint64().toString()
          break
        default:
          let u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: GenesisState,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* evmos.inflation.v1.Params params = 1; */
    if (message.params)
      Params.internalBinaryWrite(
        message.params,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join()
    /* uint64 period = 2; */
    if (message.period !== '0')
      writer.tag(2, WireType.Varint).uint64(message.period)
    /* string epoch_identifier = 3; */
    if (message.epochIdentifier !== '')
      writer.tag(3, WireType.LengthDelimited).string(message.epochIdentifier)
    /* int64 epochs_per_period = 4; */
    if (message.epochsPerPeriod !== '0')
      writer.tag(4, WireType.Varint).int64(message.epochsPerPeriod)
    /* uint64 skipped_epochs = 5; */
    if (message.skippedEpochs !== '0')
      writer.tag(5, WireType.Varint).uint64(message.skippedEpochs)
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf messages evmos.inflation.v1.GenesisState
 */
export const GenesisState = new GenesisState$Type()
// @generated messages type with reflection information, may provide speed optimized methods
class Params$Type extends MessageType<Params> {
  constructor() {
    super('evmos.inflation.v1.Params', [
      { no: 1, name: 'mint_denom', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: 'exponential_calculation',
        kind: 'message',
        T: () => ExponentialCalculation,
        options: { 'gogoproto.nullable': false },
      },
      {
        no: 3,
        name: 'inflation_distribution',
        kind: 'message',
        T: () => InflationDistribution,
        options: { 'gogoproto.nullable': false },
      },
      {
        no: 4,
        name: 'enable_inflation',
        kind: 'scalar',
        T: 8 /*ScalarType.BOOL*/,
      },
    ])
  }
  create(value?: PartialMessage<Params>): Params {
    const message = { mintDenom: '', enableInflation: false }
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    })
    if (value !== undefined)
      reflectionMergePartial<Params>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Params,
  ): Params {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* string mint_denom */ 1:
          message.mintDenom = reader.string()
          break
        case /* evmos.inflation.v1.ExponentialCalculation exponential_calculation */ 2:
          message.exponentialCalculation =
            ExponentialCalculation.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              message.exponentialCalculation,
            )
          break
        case /* evmos.inflation.v1.InflationDistribution inflation_distribution */ 3:
          message.inflationDistribution =
            InflationDistribution.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              message.inflationDistribution,
            )
          break
        case /* bool enable_inflation */ 4:
          message.enableInflation = reader.bool()
          break
        default:
          let u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: Params,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string mint_denom = 1; */
    if (message.mintDenom !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.mintDenom)
    /* evmos.inflation.v1.ExponentialCalculation exponential_calculation = 2; */
    if (message.exponentialCalculation)
      ExponentialCalculation.internalBinaryWrite(
        message.exponentialCalculation,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join()
    /* evmos.inflation.v1.InflationDistribution inflation_distribution = 3; */
    if (message.inflationDistribution)
      InflationDistribution.internalBinaryWrite(
        message.inflationDistribution,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join()
    /* bool enable_inflation = 4; */
    if (message.enableInflation !== false)
      writer.tag(4, WireType.Varint).bool(message.enableInflation)
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf messages evmos.inflation.v1.Params
 */
export const Params = new Params$Type()
