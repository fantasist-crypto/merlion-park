// @ts-nocheck
// @generated by protobuf-ts 2.5.0 with parameter long_type_string
// @generated from protobuf file "evmos/claims/v1/claims.proto" (package "evmos.claims.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MESSAGE_TYPE } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'
/**
 * Claim defines the action, completed flag and the remaining claimable amount
 * for a given user. This is only used during client queries.
 *
 * @generated from protobuf messages evmos.claims.v1.Claim
 */
export interface Claim {
  /**
   * action enum
   *
   * @generated from protobuf field: evmos.claims.v1.Action action = 1;
   */
  action: Action
  /**
   * true if the action has been completed
   *
   * @generated from protobuf field: bool completed = 2;
   */
  completed: boolean
  /**
   * claimable token amount for the action. Zero if completed
   *
   * @generated from protobuf field: string claimable_amount = 3;
   */
  claimableAmount: string
}
/**
 * ClaimsRecordAddress is the claims metadata per address that is used at Genesis.
 *
 * @generated from protobuf messages evmos.claims.v1.ClaimsRecordAddress
 */
export interface ClaimsRecordAddress {
  /**
   * bech32 or hex address of claim user
   *
   * @generated from protobuf field: string address = 1;
   */
  address: string
  /**
   * total initial claimable amount for the user
   *
   * @generated from protobuf field: string initial_claimable_amount = 2;
   */
  initialClaimableAmount: string
  /**
   * slice of the available actions completed
   *
   * @generated from protobuf field: repeated bool actions_completed = 3;
   */
  actionsCompleted: boolean[]
}
/**
 * ClaimsRecord defines the initial claimable airdrop amount and the list of
 * completed actions to claim the tokens.
 *
 * @generated from protobuf messages evmos.claims.v1.ClaimsRecord
 */
export interface ClaimsRecord {
  /**
   * total initial claimable amount for the user
   *
   * @generated from protobuf field: string initial_claimable_amount = 1;
   */
  initialClaimableAmount: string
  /**
   * slice of the available actions completed
   *
   * @generated from protobuf field: repeated bool actions_completed = 2;
   */
  actionsCompleted: boolean[]
}
/**
 * Action defines the list of available actions to claim the airdrop tokens.
 *
 * @generated from protobuf enum evmos.claims.v1.Action
 */
export enum Action {
  /**
   * UNSPECIFIED defines an invalid action.
   *
   * @generated from protobuf enum value: ACTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,
  /**
   * VOTE defines a proposal vote.
   *
   * @generated from protobuf enum value: ACTION_VOTE = 1;
   */
  VOTE = 1,
  /**
   * DELEGATE defines an staking delegation.
   *
   * @generated from protobuf enum value: ACTION_DELEGATE = 2;
   */
  DELEGATE = 2,
  /**
   * EVM defines an EVM transaction.
   *
   * @generated from protobuf enum value: ACTION_EVM = 3;
   */
  EVM = 3,
  /**
   * IBC Transfer defines a fungible token transfer transaction via IBC.
   *
   * @generated from protobuf enum value: ACTION_IBC_TRANSFER = 4;
   */
  IBC_TRANSFER = 4,
}
// @generated messages type with reflection information, may provide speed optimized methods
class Claim$Type extends MessageType<Claim> {
  constructor() {
    super('evmos.claims.v1.Claim', [
      {
        no: 1,
        name: 'action',
        kind: 'enum',
        T: () => ['evmos.claims.v1.Action', Action, 'ACTION_'],
      },
      { no: 2, name: 'completed', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
      {
        no: 3,
        name: 'claimable_amount',
        kind: 'scalar',
        T: 9 /*ScalarType.STRING*/,
        options: {
          'gogoproto.nullable': false,
          'gogoproto.customtype': 'github.com/cosmos/cosmos-sdk/types.Int',
        },
      },
    ])
  }
  create(value?: PartialMessage<Claim>): Claim {
    const message = { action: 0, completed: false, claimableAmount: '' }
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    })
    if (value !== undefined) reflectionMergePartial<Claim>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Claim,
  ): Claim {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* evmos.claims.v1.Action action */ 1:
          message.action = reader.int32()
          break
        case /* bool completed */ 2:
          message.completed = reader.bool()
          break
        case /* string claimable_amount */ 3:
          message.claimableAmount = reader.string()
          break
        default:
          let u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: Claim,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* evmos.claims.v1.Action action = 1; */
    if (message.action !== 0)
      writer.tag(1, WireType.Varint).int32(message.action)
    /* bool completed = 2; */
    if (message.completed !== false)
      writer.tag(2, WireType.Varint).bool(message.completed)
    /* string claimable_amount = 3; */
    if (message.claimableAmount !== '')
      writer.tag(3, WireType.LengthDelimited).string(message.claimableAmount)
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf messages evmos.claims.v1.Claim
 */
export const Claim = new Claim$Type()
// @generated messages type with reflection information, may provide speed optimized methods
class ClaimsRecordAddress$Type extends MessageType<ClaimsRecordAddress> {
  constructor() {
    super('evmos.claims.v1.ClaimsRecordAddress', [
      { no: 1, name: 'address', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: 'initial_claimable_amount',
        kind: 'scalar',
        T: 9 /*ScalarType.STRING*/,
        options: {
          'gogoproto.nullable': false,
          'gogoproto.customtype': 'github.com/cosmos/cosmos-sdk/types.Int',
        },
      },
      {
        no: 3,
        name: 'actions_completed',
        kind: 'scalar',
        repeat: 1 /*RepeatType.PACKED*/,
        T: 8 /*ScalarType.BOOL*/,
      },
    ])
  }
  create(value?: PartialMessage<ClaimsRecordAddress>): ClaimsRecordAddress {
    const message = {
      address: '',
      initialClaimableAmount: '',
      actionsCompleted: [],
    }
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    })
    if (value !== undefined)
      reflectionMergePartial<ClaimsRecordAddress>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ClaimsRecordAddress,
  ): ClaimsRecordAddress {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* string address */ 1:
          message.address = reader.string()
          break
        case /* string initial_claimable_amount */ 2:
          message.initialClaimableAmount = reader.string()
          break
        case /* repeated bool actions_completed */ 3:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.actionsCompleted.push(reader.bool())
          else message.actionsCompleted.push(reader.bool())
          break
        default:
          let u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: ClaimsRecordAddress,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string address = 1; */
    if (message.address !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.address)
    /* string initial_claimable_amount = 2; */
    if (message.initialClaimableAmount !== '')
      writer
        .tag(2, WireType.LengthDelimited)
        .string(message.initialClaimableAmount)
    /* repeated bool actions_completed = 3; */
    if (message.actionsCompleted.length) {
      writer.tag(3, WireType.LengthDelimited).fork()
      for (let i = 0; i < message.actionsCompleted.length; i++)
        writer.bool(message.actionsCompleted[i])
      writer.join()
    }
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf messages evmos.claims.v1.ClaimsRecordAddress
 */
export const ClaimsRecordAddress = new ClaimsRecordAddress$Type()
// @generated messages type with reflection information, may provide speed optimized methods
class ClaimsRecord$Type extends MessageType<ClaimsRecord> {
  constructor() {
    super('evmos.claims.v1.ClaimsRecord', [
      {
        no: 1,
        name: 'initial_claimable_amount',
        kind: 'scalar',
        T: 9 /*ScalarType.STRING*/,
        options: {
          'gogoproto.nullable': false,
          'gogoproto.customtype': 'github.com/cosmos/cosmos-sdk/types.Int',
        },
      },
      {
        no: 2,
        name: 'actions_completed',
        kind: 'scalar',
        repeat: 1 /*RepeatType.PACKED*/,
        T: 8 /*ScalarType.BOOL*/,
      },
    ])
  }
  create(value?: PartialMessage<ClaimsRecord>): ClaimsRecord {
    const message = { initialClaimableAmount: '', actionsCompleted: [] }
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    })
    if (value !== undefined)
      reflectionMergePartial<ClaimsRecord>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ClaimsRecord,
  ): ClaimsRecord {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* string initial_claimable_amount */ 1:
          message.initialClaimableAmount = reader.string()
          break
        case /* repeated bool actions_completed */ 2:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.actionsCompleted.push(reader.bool())
          else message.actionsCompleted.push(reader.bool())
          break
        default:
          let u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: ClaimsRecord,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string initial_claimable_amount = 1; */
    if (message.initialClaimableAmount !== '')
      writer
        .tag(1, WireType.LengthDelimited)
        .string(message.initialClaimableAmount)
    /* repeated bool actions_completed = 2; */
    if (message.actionsCompleted.length) {
      writer.tag(2, WireType.LengthDelimited).fork()
      for (let i = 0; i < message.actionsCompleted.length; i++)
        writer.bool(message.actionsCompleted[i])
      writer.join()
    }
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf messages evmos.claims.v1.ClaimsRecord
 */
export const ClaimsRecord = new ClaimsRecord$Type()
