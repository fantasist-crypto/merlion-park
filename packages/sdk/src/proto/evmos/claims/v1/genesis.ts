// @ts-nocheck
// @generated by protobuf-ts 2.5.0 with parameter long_type_string
// @generated from protobuf file "evmos/claims/v1/genesis.proto" (package "evmos.claims.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MESSAGE_TYPE } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'
import { Duration } from '../../../google/protobuf/duration'
import { Timestamp } from '../../../google/protobuf/timestamp'
import { ClaimsRecordAddress } from './claims'
/**
 * GenesisState define the claims module's genesis state.
 *
 * @generated from protobuf messages evmos.claims.v1.GenesisState
 */
export interface GenesisState {
  /**
   * params defines all the parameters of the module.
   *
   * @generated from protobuf field: evmos.claims.v1.Params params = 1;
   */
  params?: Params
  /**
   * list of claim records with the corresponding airdrop recipient
   *
   * @generated from protobuf field: repeated evmos.claims.v1.ClaimsRecordAddress claims_records = 2;
   */
  claimsRecords: ClaimsRecordAddress[]
}
/**
 * Params defines the claims module's parameters.
 *
 * @generated from protobuf messages evmos.claims.v1.Params
 */
export interface Params {
  /**
   * enable claiming process
   *
   * @generated from protobuf field: bool enable_claims = 1;
   */
  enableClaims: boolean
  /**
   * timestamp of the airdrop start
   *
   * @generated from protobuf field: google.protobuf.Timestamp airdrop_start_time = 2;
   */
  airdropStartTime?: Timestamp
  /**
   * duration until decay of claimable tokens begin
   *
   * @generated from protobuf field: google.protobuf.Duration duration_until_decay = 3;
   */
  durationUntilDecay?: Duration
  /**
   * duration of the token claim decay period
   *
   * @generated from protobuf field: google.protobuf.Duration duration_of_decay = 4;
   */
  durationOfDecay?: Duration
  /**
   * denom of claimable coin
   *
   * @generated from protobuf field: string claims_denom = 5;
   */
  claimsDenom: string
  /**
   * list of authorized channel identifiers that can perform address
   * attestations via IBC.
   *
   * @generated from protobuf field: repeated string authorized_channels = 6;
   */
  authorizedChannels: string[]
  /**
   * list of channel identifiers from EVM compatible chains
   *
   * @generated from protobuf field: repeated string evm_channels = 7;
   */
  evmChannels: string[]
}
// @generated messages type with reflection information, may provide speed optimized methods
class GenesisState$Type extends MessageType<GenesisState> {
  constructor() {
    super('evmos.claims.v1.GenesisState', [
      {
        no: 1,
        name: 'params',
        kind: 'message',
        T: () => Params,
        options: { 'gogoproto.nullable': false },
      },
      {
        no: 2,
        name: 'claims_records',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => ClaimsRecordAddress,
        options: { 'gogoproto.nullable': false },
      },
    ])
  }
  create(value?: PartialMessage<GenesisState>): GenesisState {
    const message = { claimsRecords: [] }
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    })
    if (value !== undefined)
      reflectionMergePartial<GenesisState>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GenesisState,
  ): GenesisState {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* evmos.claims.v1.Params params */ 1:
          message.params = Params.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.params,
          )
          break
        case /* repeated evmos.claims.v1.ClaimsRecordAddress claims_records */ 2:
          message.claimsRecords.push(
            ClaimsRecordAddress.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
            ),
          )
          break
        default:
          let u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: GenesisState,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* evmos.claims.v1.Params params = 1; */
    if (message.params)
      Params.internalBinaryWrite(
        message.params,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join()
    /* repeated evmos.claims.v1.ClaimsRecordAddress claims_records = 2; */
    for (let i = 0; i < message.claimsRecords.length; i++)
      ClaimsRecordAddress.internalBinaryWrite(
        message.claimsRecords[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join()
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf messages evmos.claims.v1.GenesisState
 */
export const GenesisState = new GenesisState$Type()
// @generated messages type with reflection information, may provide speed optimized methods
class Params$Type extends MessageType<Params> {
  constructor() {
    super('evmos.claims.v1.Params', [
      {
        no: 1,
        name: 'enable_claims',
        kind: 'scalar',
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 2,
        name: 'airdrop_start_time',
        kind: 'message',
        T: () => Timestamp,
        options: { 'gogoproto.nullable': false, 'gogoproto.stdtime': true },
      },
      {
        no: 3,
        name: 'duration_until_decay',
        kind: 'message',
        T: () => Duration,
        options: { 'gogoproto.nullable': false, 'gogoproto.stdduration': true },
      },
      {
        no: 4,
        name: 'duration_of_decay',
        kind: 'message',
        T: () => Duration,
        options: { 'gogoproto.nullable': false, 'gogoproto.stdduration': true },
      },
      {
        no: 5,
        name: 'claims_denom',
        kind: 'scalar',
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 6,
        name: 'authorized_channels',
        kind: 'scalar',
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 7,
        name: 'evm_channels',
        kind: 'scalar',
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/,
        options: { 'gogoproto.customname': 'EVMChannels' },
      },
    ])
  }
  create(value?: PartialMessage<Params>): Params {
    const message = {
      enableClaims: false,
      claimsDenom: '',
      authorizedChannels: [],
      evmChannels: [],
    }
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    })
    if (value !== undefined)
      reflectionMergePartial<Params>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Params,
  ): Params {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* bool enable_claims */ 1:
          message.enableClaims = reader.bool()
          break
        case /* google.protobuf.Timestamp airdrop_start_time */ 2:
          message.airdropStartTime = Timestamp.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.airdropStartTime,
          )
          break
        case /* google.protobuf.Duration duration_until_decay */ 3:
          message.durationUntilDecay = Duration.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.durationUntilDecay,
          )
          break
        case /* google.protobuf.Duration duration_of_decay */ 4:
          message.durationOfDecay = Duration.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.durationOfDecay,
          )
          break
        case /* string claims_denom */ 5:
          message.claimsDenom = reader.string()
          break
        case /* repeated string authorized_channels */ 6:
          message.authorizedChannels.push(reader.string())
          break
        case /* repeated string evm_channels */ 7:
          message.evmChannels.push(reader.string())
          break
        default:
          let u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: Params,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* bool enable_claims = 1; */
    if (message.enableClaims !== false)
      writer.tag(1, WireType.Varint).bool(message.enableClaims)
    /* google.protobuf.Timestamp airdrop_start_time = 2; */
    if (message.airdropStartTime)
      Timestamp.internalBinaryWrite(
        message.airdropStartTime,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join()
    /* google.protobuf.Duration duration_until_decay = 3; */
    if (message.durationUntilDecay)
      Duration.internalBinaryWrite(
        message.durationUntilDecay,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join()
    /* google.protobuf.Duration duration_of_decay = 4; */
    if (message.durationOfDecay)
      Duration.internalBinaryWrite(
        message.durationOfDecay,
        writer.tag(4, WireType.LengthDelimited).fork(),
        options,
      ).join()
    /* string claims_denom = 5; */
    if (message.claimsDenom !== '')
      writer.tag(5, WireType.LengthDelimited).string(message.claimsDenom)
    /* repeated string authorized_channels = 6; */
    for (let i = 0; i < message.authorizedChannels.length; i++)
      writer
        .tag(6, WireType.LengthDelimited)
        .string(message.authorizedChannels[i])
    /* repeated string evm_channels = 7; */
    for (let i = 0; i < message.evmChannels.length; i++)
      writer.tag(7, WireType.LengthDelimited).string(message.evmChannels[i])
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf messages evmos.claims.v1.Params
 */
export const Params = new Params$Type()
