// @ts-nocheck
// @generated by protobuf-ts 2.5.0 with parameter long_type_string
// @generated from protobuf file "evmos/claims/v1/query.proto" (package "evmos.claims.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from '@protobuf-ts/runtime-rpc'
import type { ServiceInfo } from '@protobuf-ts/runtime-rpc'
import { Query } from './query'
import type { QueryClaimsRecordResponse } from './query'
import type { QueryClaimsRecordRequest } from './query'
import type { QueryClaimsRecordsResponse } from './query'
import type { QueryClaimsRecordsRequest } from './query'
import type { QueryParamsResponse } from './query'
import type { QueryParamsRequest } from './query'
import { stackIntercept } from '@protobuf-ts/runtime-rpc'
import type { QueryTotalUnclaimedResponse } from './query'
import type { QueryTotalUnclaimedRequest } from './query'
import type { UnaryCall } from '@protobuf-ts/runtime-rpc'
import type { RpcOptions } from '@protobuf-ts/runtime-rpc'
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service evmos.claims.v1.Query
 */
export interface IQueryClient {
  /**
   * TotalUnclaimed queries the total unclaimed tokens from the airdrop
   *
   * @generated from protobuf rpc: TotalUnclaimed(evmos.claims.v1.QueryTotalUnclaimedRequest) returns (evmos.claims.v1.QueryTotalUnclaimedResponse);
   */
  totalUnclaimed(
    input: QueryTotalUnclaimedRequest,
    options?: RpcOptions,
  ): UnaryCall<QueryTotalUnclaimedRequest, QueryTotalUnclaimedResponse>
  /**
   * Params returns the claims module parameters
   *
   * @generated from protobuf rpc: Params(evmos.claims.v1.QueryParamsRequest) returns (evmos.claims.v1.QueryParamsResponse);
   */
  params(
    input: QueryParamsRequest,
    options?: RpcOptions,
  ): UnaryCall<QueryParamsRequest, QueryParamsResponse>
  /**
   * ClaimsRecords returns all claims records
   *
   * @generated from protobuf rpc: ClaimsRecords(evmos.claims.v1.QueryClaimsRecordsRequest) returns (evmos.claims.v1.QueryClaimsRecordsResponse);
   */
  claimsRecords(
    input: QueryClaimsRecordsRequest,
    options?: RpcOptions,
  ): UnaryCall<QueryClaimsRecordsRequest, QueryClaimsRecordsResponse>
  /**
   * ClaimsRecord returns the claims record for a given address
   *
   * @generated from protobuf rpc: ClaimsRecord(evmos.claims.v1.QueryClaimsRecordRequest) returns (evmos.claims.v1.QueryClaimsRecordResponse);
   */
  claimsRecord(
    input: QueryClaimsRecordRequest,
    options?: RpcOptions,
  ): UnaryCall<QueryClaimsRecordRequest, QueryClaimsRecordResponse>
}
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service evmos.claims.v1.Query
 */
export class QueryClient implements IQueryClient, ServiceInfo {
  typeName = Query.typeName
  methods = Query.methods
  options = Query.options
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * TotalUnclaimed queries the total unclaimed tokens from the airdrop
   *
   * @generated from protobuf rpc: TotalUnclaimed(evmos.claims.v1.QueryTotalUnclaimedRequest) returns (evmos.claims.v1.QueryTotalUnclaimedResponse);
   */
  totalUnclaimed(
    input: QueryTotalUnclaimedRequest,
    options?: RpcOptions,
  ): UnaryCall<QueryTotalUnclaimedRequest, QueryTotalUnclaimedResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options)
    return stackIntercept<
      QueryTotalUnclaimedRequest,
      QueryTotalUnclaimedResponse
    >('unary', this._transport, method, opt, input)
  }
  /**
   * Params returns the claims module parameters
   *
   * @generated from protobuf rpc: Params(evmos.claims.v1.QueryParamsRequest) returns (evmos.claims.v1.QueryParamsResponse);
   */
  params(
    input: QueryParamsRequest,
    options?: RpcOptions,
  ): UnaryCall<QueryParamsRequest, QueryParamsResponse> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options)
    return stackIntercept<QueryParamsRequest, QueryParamsResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    )
  }
  /**
   * ClaimsRecords returns all claims records
   *
   * @generated from protobuf rpc: ClaimsRecords(evmos.claims.v1.QueryClaimsRecordsRequest) returns (evmos.claims.v1.QueryClaimsRecordsResponse);
   */
  claimsRecords(
    input: QueryClaimsRecordsRequest,
    options?: RpcOptions,
  ): UnaryCall<QueryClaimsRecordsRequest, QueryClaimsRecordsResponse> {
    const method = this.methods[2],
      opt = this._transport.mergeOptions(options)
    return stackIntercept<
      QueryClaimsRecordsRequest,
      QueryClaimsRecordsResponse
    >('unary', this._transport, method, opt, input)
  }
  /**
   * ClaimsRecord returns the claims record for a given address
   *
   * @generated from protobuf rpc: ClaimsRecord(evmos.claims.v1.QueryClaimsRecordRequest) returns (evmos.claims.v1.QueryClaimsRecordResponse);
   */
  claimsRecord(
    input: QueryClaimsRecordRequest,
    options?: RpcOptions,
  ): UnaryCall<QueryClaimsRecordRequest, QueryClaimsRecordResponse> {
    const method = this.methods[3],
      opt = this._transport.mergeOptions(options)
    return stackIntercept<QueryClaimsRecordRequest, QueryClaimsRecordResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    )
  }
}
