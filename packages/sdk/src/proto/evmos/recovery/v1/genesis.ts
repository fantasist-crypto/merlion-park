// @ts-nocheck
// @generated by protobuf-ts 2.5.0 with parameter long_type_string
// @generated from protobuf file "evmos/recovery/v1/genesis.proto" (package "evmos.recovery.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MESSAGE_TYPE } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'
import { Duration } from '../../../google/protobuf/duration'
/**
 * GenesisState defines the recovery module's genesis state.
 *
 * @generated from protobuf messages evmos.recovery.v1.GenesisState
 */
export interface GenesisState {
  /**
   * params defines all the paramaters of the module.
   *
   * @generated from protobuf field: evmos.recovery.v1.Params params = 1;
   */
  params?: Params
}
/**
 * Params holds parameters for the recovery module
 *
 * @generated from protobuf messages evmos.recovery.v1.Params
 */
export interface Params {
  /**
   * enable recovery IBC middleware
   *
   * @generated from protobuf field: bool enable_recovery = 1;
   */
  enableRecovery: boolean
  /**
   * duration added to timeout timestamp for balances recovered via IBC packets
   *
   * @generated from protobuf field: google.protobuf.Duration packet_timeout_duration = 2;
   */
  packetTimeoutDuration?: Duration
}
// @generated messages type with reflection information, may provide speed optimized methods
class GenesisState$Type extends MessageType<GenesisState> {
  constructor() {
    super('evmos.recovery.v1.GenesisState', [
      {
        no: 1,
        name: 'params',
        kind: 'message',
        T: () => Params,
        options: { 'gogoproto.nullable': false },
      },
    ])
  }
  create(value?: PartialMessage<GenesisState>): GenesisState {
    const message = {}
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    })
    if (value !== undefined)
      reflectionMergePartial<GenesisState>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GenesisState,
  ): GenesisState {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* evmos.recovery.v1.Params params */ 1:
          message.params = Params.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.params,
          )
          break
        default:
          let u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: GenesisState,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* evmos.recovery.v1.Params params = 1; */
    if (message.params)
      Params.internalBinaryWrite(
        message.params,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join()
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf messages evmos.recovery.v1.GenesisState
 */
export const GenesisState = new GenesisState$Type()
// @generated messages type with reflection information, may provide speed optimized methods
class Params$Type extends MessageType<Params> {
  constructor() {
    super('evmos.recovery.v1.Params', [
      {
        no: 1,
        name: 'enable_recovery',
        kind: 'scalar',
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 2,
        name: 'packet_timeout_duration',
        kind: 'message',
        T: () => Duration,
        options: { 'gogoproto.nullable': false, 'gogoproto.stdduration': true },
      },
    ])
  }
  create(value?: PartialMessage<Params>): Params {
    const message = { enableRecovery: false }
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    })
    if (value !== undefined)
      reflectionMergePartial<Params>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Params,
  ): Params {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* bool enable_recovery */ 1:
          message.enableRecovery = reader.bool()
          break
        case /* google.protobuf.Duration packet_timeout_duration */ 2:
          message.packetTimeoutDuration = Duration.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.packetTimeoutDuration,
          )
          break
        default:
          let u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: Params,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* bool enable_recovery = 1; */
    if (message.enableRecovery !== false)
      writer.tag(1, WireType.Varint).bool(message.enableRecovery)
    /* google.protobuf.Duration packet_timeout_duration = 2; */
    if (message.packetTimeoutDuration)
      Duration.internalBinaryWrite(
        message.packetTimeoutDuration,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join()
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf messages evmos.recovery.v1.Params
 */
export const Params = new Params$Type()
