// @ts-nocheck
// @generated by protobuf-ts 2.5.0 with parameter long_type_string
// @generated from protobuf file "evmos/vesting/v1/query.proto" (package "evmos.vesting.v1", syntax proto3)
// tslint:disable
import { ServiceType } from '@protobuf-ts/runtime-rpc'
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MESSAGE_TYPE } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'
import { Coin } from '../../../cosmos/base/v1beta1/coin'
/**
 * QueryBalancesRequest is the request type for the Query/Balances RPC method.
 *
 * @generated from protobuf messages evmos.vesting.v1.QueryBalancesRequest
 */
export interface QueryBalancesRequest {
  /**
   * address of the clawback vesting account
   *
   * @generated from protobuf field: string address = 1;
   */
  address: string
}
/**
 * QueryBalancesResponse is the response type for the Query/Balances RPC
 * method.
 *
 * @generated from protobuf messages evmos.vesting.v1.QueryBalancesResponse
 */
export interface QueryBalancesResponse {
  /**
   * current amount of locked tokens
   *
   * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin locked = 1;
   */
  locked: Coin[]
  /**
   * current amount of unvested tokens
   *
   * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin unvested = 2;
   */
  unvested: Coin[]
  /**
   * current amount of vested tokens
   *
   * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin vested = 3;
   */
  vested: Coin[]
}
// @generated messages type with reflection information, may provide speed optimized methods
class QueryBalancesRequest$Type extends MessageType<QueryBalancesRequest> {
  constructor() {
    super('evmos.vesting.v1.QueryBalancesRequest', [
      { no: 1, name: 'address', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ])
  }
  create(value?: PartialMessage<QueryBalancesRequest>): QueryBalancesRequest {
    const message = { address: '' }
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    })
    if (value !== undefined)
      reflectionMergePartial<QueryBalancesRequest>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: QueryBalancesRequest,
  ): QueryBalancesRequest {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* string address */ 1:
          message.address = reader.string()
          break
        default:
          let u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: QueryBalancesRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string address = 1; */
    if (message.address !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.address)
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf messages evmos.vesting.v1.QueryBalancesRequest
 */
export const QueryBalancesRequest = new QueryBalancesRequest$Type()
// @generated messages type with reflection information, may provide speed optimized methods
class QueryBalancesResponse$Type extends MessageType<QueryBalancesResponse> {
  constructor() {
    super('evmos.vesting.v1.QueryBalancesResponse', [
      {
        no: 1,
        name: 'locked',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => Coin,
        options: {
          'gogoproto.nullable': false,
          'gogoproto.castrepeated': 'github.com/cosmos/cosmos-sdk/types.Coins',
        },
      },
      {
        no: 2,
        name: 'unvested',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => Coin,
        options: {
          'gogoproto.nullable': false,
          'gogoproto.castrepeated': 'github.com/cosmos/cosmos-sdk/types.Coins',
        },
      },
      {
        no: 3,
        name: 'vested',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => Coin,
        options: {
          'gogoproto.nullable': false,
          'gogoproto.castrepeated': 'github.com/cosmos/cosmos-sdk/types.Coins',
        },
      },
    ])
  }
  create(value?: PartialMessage<QueryBalancesResponse>): QueryBalancesResponse {
    const message = { locked: [], unvested: [], vested: [] }
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    })
    if (value !== undefined)
      reflectionMergePartial<QueryBalancesResponse>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: QueryBalancesResponse,
  ): QueryBalancesResponse {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* repeated cosmos.base.v1beta1.Coin locked */ 1:
          message.locked.push(
            Coin.internalBinaryRead(reader, reader.uint32(), options),
          )
          break
        case /* repeated cosmos.base.v1beta1.Coin unvested */ 2:
          message.unvested.push(
            Coin.internalBinaryRead(reader, reader.uint32(), options),
          )
          break
        case /* repeated cosmos.base.v1beta1.Coin vested */ 3:
          message.vested.push(
            Coin.internalBinaryRead(reader, reader.uint32(), options),
          )
          break
        default:
          let u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: QueryBalancesResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated cosmos.base.v1beta1.Coin locked = 1; */
    for (let i = 0; i < message.locked.length; i++)
      Coin.internalBinaryWrite(
        message.locked[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join()
    /* repeated cosmos.base.v1beta1.Coin unvested = 2; */
    for (let i = 0; i < message.unvested.length; i++)
      Coin.internalBinaryWrite(
        message.unvested[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join()
    /* repeated cosmos.base.v1beta1.Coin vested = 3; */
    for (let i = 0; i < message.vested.length; i++)
      Coin.internalBinaryWrite(
        message.vested[i],
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join()
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf messages evmos.vesting.v1.QueryBalancesResponse
 */
export const QueryBalancesResponse = new QueryBalancesResponse$Type()
/**
 * @generated ServiceType for protobuf service evmos.vesting.v1.Query
 */
export const Query = new ServiceType('evmos.vesting.v1.Query', [
  {
    name: 'Balances',
    options: {
      'google.api.http': { get: '/evmos/vesting/v1/balances/{address}' },
    },
    I: QueryBalancesRequest,
    O: QueryBalancesResponse,
  },
])
