// @ts-nocheck
// @generated by protobuf-ts 2.5.0 with parameter long_type_string
// @generated from protobuf file "evmos/vesting/v1/tx.proto" (package "evmos.vesting.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from '@protobuf-ts/runtime-rpc'
import type { ServiceInfo } from '@protobuf-ts/runtime-rpc'
import { Msg } from './tx'
import type { MsgClawbackResponse } from './tx'
import type { MsgClawback } from './tx'
import { stackIntercept } from '@protobuf-ts/runtime-rpc'
import type { MsgCreateClawbackVestingAccountResponse } from './tx'
import type { MsgCreateClawbackVestingAccount } from './tx'
import type { UnaryCall } from '@protobuf-ts/runtime-rpc'
import type { RpcOptions } from '@protobuf-ts/runtime-rpc'
/**
 * Msg defines the vesting Msg service.
 *
 * @generated from protobuf service evmos.vesting.v1.Msg
 */
export interface IMsgClient {
  /**
   * CreateClawbackVestingAccount creats a vesting account that is subject to
   * clawback and the configuration of vesting and lockup schedules.
   *
   * @generated from protobuf rpc: CreateClawbackVestingAccount(evmos.vesting.v1.MsgCreateClawbackVestingAccount) returns (evmos.vesting.v1.MsgCreateClawbackVestingAccountResponse);
   */
  createClawbackVestingAccount(
    input: MsgCreateClawbackVestingAccount,
    options?: RpcOptions,
  ): UnaryCall<
    MsgCreateClawbackVestingAccount,
    MsgCreateClawbackVestingAccountResponse
  >
  /**
   * Clawback removes the unvested tokens from a ClawbackVestingAccount.
   *
   * @generated from protobuf rpc: Clawback(evmos.vesting.v1.MsgClawback) returns (evmos.vesting.v1.MsgClawbackResponse);
   */
  clawback(
    input: MsgClawback,
    options?: RpcOptions,
  ): UnaryCall<MsgClawback, MsgClawbackResponse>
}
/**
 * Msg defines the vesting Msg service.
 *
 * @generated from protobuf service evmos.vesting.v1.Msg
 */
export class MsgClient implements IMsgClient, ServiceInfo {
  typeName = Msg.typeName
  methods = Msg.methods
  options = Msg.options
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * CreateClawbackVestingAccount creats a vesting account that is subject to
   * clawback and the configuration of vesting and lockup schedules.
   *
   * @generated from protobuf rpc: CreateClawbackVestingAccount(evmos.vesting.v1.MsgCreateClawbackVestingAccount) returns (evmos.vesting.v1.MsgCreateClawbackVestingAccountResponse);
   */
  createClawbackVestingAccount(
    input: MsgCreateClawbackVestingAccount,
    options?: RpcOptions,
  ): UnaryCall<
    MsgCreateClawbackVestingAccount,
    MsgCreateClawbackVestingAccountResponse
  > {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options)
    return stackIntercept<
      MsgCreateClawbackVestingAccount,
      MsgCreateClawbackVestingAccountResponse
    >('unary', this._transport, method, opt, input)
  }
  /**
   * Clawback removes the unvested tokens from a ClawbackVestingAccount.
   *
   * @generated from protobuf rpc: Clawback(evmos.vesting.v1.MsgClawback) returns (evmos.vesting.v1.MsgClawbackResponse);
   */
  clawback(
    input: MsgClawback,
    options?: RpcOptions,
  ): UnaryCall<MsgClawback, MsgClawbackResponse> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options)
    return stackIntercept<MsgClawback, MsgClawbackResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    )
  }
}
