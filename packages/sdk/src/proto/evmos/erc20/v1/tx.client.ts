// @ts-nocheck
// @generated by protobuf-ts 2.5.0 with parameter long_type_string
// @generated from protobuf file "evmos/erc20/v1/tx.proto" (package "evmos.erc20.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from '@protobuf-ts/runtime-rpc'
import type { ServiceInfo } from '@protobuf-ts/runtime-rpc'
import { Msg } from './tx'
import type { MsgConvertERC20Response } from './tx'
import type { MsgConvertERC20 } from './tx'
import { stackIntercept } from '@protobuf-ts/runtime-rpc'
import type { MsgConvertCoinResponse } from './tx'
import type { MsgConvertCoin } from './tx'
import type { UnaryCall } from '@protobuf-ts/runtime-rpc'
import type { RpcOptions } from '@protobuf-ts/runtime-rpc'
/**
 * Msg defines the erc20 Msg service.
 *
 * @generated from protobuf service evmos.erc20.v1.Msg
 */
export interface IMsgClient {
  /**
   * ConvertCoin mints a ERC20 representation of the SDK Coin denom that is
   * registered on the token mapping.
   *
   * @generated from protobuf rpc: ConvertCoin(evmos.erc20.v1.MsgConvertCoin) returns (evmos.erc20.v1.MsgConvertCoinResponse);
   */
  convertCoin(
    input: MsgConvertCoin,
    options?: RpcOptions,
  ): UnaryCall<MsgConvertCoin, MsgConvertCoinResponse>
  /**
   * ConvertERC20 mints a Cosmos coin representation of the ERC20 token contract
   * that is registered on the token mapping.
   *
   * @generated from protobuf rpc: ConvertERC20(evmos.erc20.v1.MsgConvertERC20) returns (evmos.erc20.v1.MsgConvertERC20Response);
   */
  convertERC20(
    input: MsgConvertERC20,
    options?: RpcOptions,
  ): UnaryCall<MsgConvertERC20, MsgConvertERC20Response>
}
/**
 * Msg defines the erc20 Msg service.
 *
 * @generated from protobuf service evmos.erc20.v1.Msg
 */
export class MsgClient implements IMsgClient, ServiceInfo {
  typeName = Msg.typeName
  methods = Msg.methods
  options = Msg.options
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * ConvertCoin mints a ERC20 representation of the SDK Coin denom that is
   * registered on the token mapping.
   *
   * @generated from protobuf rpc: ConvertCoin(evmos.erc20.v1.MsgConvertCoin) returns (evmos.erc20.v1.MsgConvertCoinResponse);
   */
  convertCoin(
    input: MsgConvertCoin,
    options?: RpcOptions,
  ): UnaryCall<MsgConvertCoin, MsgConvertCoinResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options)
    return stackIntercept<MsgConvertCoin, MsgConvertCoinResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    )
  }
  /**
   * ConvertERC20 mints a Cosmos coin representation of the ERC20 token contract
   * that is registered on the token mapping.
   *
   * @generated from protobuf rpc: ConvertERC20(evmos.erc20.v1.MsgConvertERC20) returns (evmos.erc20.v1.MsgConvertERC20Response);
   */
  convertERC20(
    input: MsgConvertERC20,
    options?: RpcOptions,
  ): UnaryCall<MsgConvertERC20, MsgConvertERC20Response> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options)
    return stackIntercept<MsgConvertERC20, MsgConvertERC20Response>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    )
  }
}
