// @ts-nocheck
// @generated by protobuf-ts 2.5.0 with parameter long_type_string
// @generated from protobuf file "evmos/erc20/v1/tx.proto" (package "evmos.erc20.v1", syntax proto3)
// tslint:disable
import { ServiceType } from '@protobuf-ts/runtime-rpc'
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MESSAGE_TYPE } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'
import { Coin } from '../../../cosmos/base/v1beta1/coin'
/**
 * MsgConvertCoin defines a Msg to convert a Cosmos Coin to a ERC20 token
 *
 * @generated from protobuf messages evmos.erc20.v1.MsgConvertCoin
 */
export interface MsgConvertCoin {
  /**
   * Cosmos coin which denomination is registered on erc20 bridge.
   * The coin amount defines the total ERC20 tokens to convert.
   *
   * @generated from protobuf field: cosmos.base.v1beta1.Coin coin = 1;
   */
  coin?: Coin
  /**
   * recipient hex address to receive ERC20 token
   *
   * @generated from protobuf field: string receiver = 2;
   */
  receiver: string
  /**
   * cosmos bech32 address from the owner of the given ERC20 tokens
   *
   * @generated from protobuf field: string sender = 3;
   */
  sender: string
}
/**
 * MsgConvertCoinResponse returns no fields
 *
 * @generated from protobuf messages evmos.erc20.v1.MsgConvertCoinResponse
 */
export interface MsgConvertCoinResponse {}
/**
 * MsgConvertERC20 defines a Msg to convert an ERC20 token to a Cosmos SDK coin.
 *
 * @generated from protobuf messages evmos.erc20.v1.MsgConvertERC20
 */
export interface MsgConvertERC20 {
  /**
   * ERC20 token contract address registered on erc20 bridge
   *
   * @generated from protobuf field: string contract_address = 1;
   */
  contractAddress: string
  /**
   * amount of ERC20 tokens to mint
   *
   * @generated from protobuf field: string amount = 2;
   */
  amount: string
  /**
   * bech32 address to receive SDK coins.
   *
   * @generated from protobuf field: string receiver = 3;
   */
  receiver: string
  /**
   * sender hex address from the owner of the given ERC20 tokens
   *
   * @generated from protobuf field: string sender = 4;
   */
  sender: string
}
/**
 * MsgConvertERC20Response returns no fields
 *
 * @generated from protobuf messages evmos.erc20.v1.MsgConvertERC20Response
 */
export interface MsgConvertERC20Response {}
// @generated messages type with reflection information, may provide speed optimized methods
class MsgConvertCoin$Type extends MessageType<MsgConvertCoin> {
  constructor() {
    super('evmos.erc20.v1.MsgConvertCoin', [
      {
        no: 1,
        name: 'coin',
        kind: 'message',
        T: () => Coin,
        options: { 'gogoproto.nullable': false },
      },
      { no: 2, name: 'receiver', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: 'sender', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ])
  }
  create(value?: PartialMessage<MsgConvertCoin>): MsgConvertCoin {
    const message = { receiver: '', sender: '' }
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    })
    if (value !== undefined)
      reflectionMergePartial<MsgConvertCoin>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: MsgConvertCoin,
  ): MsgConvertCoin {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* cosmos.base.v1beta1.Coin coin */ 1:
          message.coin = Coin.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.coin,
          )
          break
        case /* string receiver */ 2:
          message.receiver = reader.string()
          break
        case /* string sender */ 3:
          message.sender = reader.string()
          break
        default:
          let u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: MsgConvertCoin,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* cosmos.base.v1beta1.Coin coin = 1; */
    if (message.coin)
      Coin.internalBinaryWrite(
        message.coin,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join()
    /* string receiver = 2; */
    if (message.receiver !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.receiver)
    /* string sender = 3; */
    if (message.sender !== '')
      writer.tag(3, WireType.LengthDelimited).string(message.sender)
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf messages evmos.erc20.v1.MsgConvertCoin
 */
export const MsgConvertCoin = new MsgConvertCoin$Type()
// @generated messages type with reflection information, may provide speed optimized methods
class MsgConvertCoinResponse$Type extends MessageType<MsgConvertCoinResponse> {
  constructor() {
    super('evmos.erc20.v1.MsgConvertCoinResponse', [])
  }
  create(
    value?: PartialMessage<MsgConvertCoinResponse>,
  ): MsgConvertCoinResponse {
    const message = {}
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    })
    if (value !== undefined)
      reflectionMergePartial<MsgConvertCoinResponse>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: MsgConvertCoinResponse,
  ): MsgConvertCoinResponse {
    return target ?? this.create()
  }
  internalBinaryWrite(
    message: MsgConvertCoinResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf messages evmos.erc20.v1.MsgConvertCoinResponse
 */
export const MsgConvertCoinResponse = new MsgConvertCoinResponse$Type()
// @generated messages type with reflection information, may provide speed optimized methods
class MsgConvertERC20$Type extends MessageType<MsgConvertERC20> {
  constructor() {
    super('evmos.erc20.v1.MsgConvertERC20', [
      {
        no: 1,
        name: 'contract_address',
        kind: 'scalar',
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 2,
        name: 'amount',
        kind: 'scalar',
        T: 9 /*ScalarType.STRING*/,
        options: {
          'gogoproto.nullable': false,
          'gogoproto.customtype': 'github.com/cosmos/cosmos-sdk/types.Int',
        },
      },
      { no: 3, name: 'receiver', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 4, name: 'sender', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ])
  }
  create(value?: PartialMessage<MsgConvertERC20>): MsgConvertERC20 {
    const message = {
      contractAddress: '',
      amount: '',
      receiver: '',
      sender: '',
    }
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    })
    if (value !== undefined)
      reflectionMergePartial<MsgConvertERC20>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: MsgConvertERC20,
  ): MsgConvertERC20 {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* string contract_address */ 1:
          message.contractAddress = reader.string()
          break
        case /* string amount */ 2:
          message.amount = reader.string()
          break
        case /* string receiver */ 3:
          message.receiver = reader.string()
          break
        case /* string sender */ 4:
          message.sender = reader.string()
          break
        default:
          let u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: MsgConvertERC20,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string contract_address = 1; */
    if (message.contractAddress !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.contractAddress)
    /* string amount = 2; */
    if (message.amount !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.amount)
    /* string receiver = 3; */
    if (message.receiver !== '')
      writer.tag(3, WireType.LengthDelimited).string(message.receiver)
    /* string sender = 4; */
    if (message.sender !== '')
      writer.tag(4, WireType.LengthDelimited).string(message.sender)
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf messages evmos.erc20.v1.MsgConvertERC20
 */
export const MsgConvertERC20 = new MsgConvertERC20$Type()
// @generated messages type with reflection information, may provide speed optimized methods
class MsgConvertERC20Response$Type extends MessageType<MsgConvertERC20Response> {
  constructor() {
    super('evmos.erc20.v1.MsgConvertERC20Response', [])
  }
  create(
    value?: PartialMessage<MsgConvertERC20Response>,
  ): MsgConvertERC20Response {
    const message = {}
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    })
    if (value !== undefined)
      reflectionMergePartial<MsgConvertERC20Response>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: MsgConvertERC20Response,
  ): MsgConvertERC20Response {
    return target ?? this.create()
  }
  internalBinaryWrite(
    message: MsgConvertERC20Response,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf messages evmos.erc20.v1.MsgConvertERC20Response
 */
export const MsgConvertERC20Response = new MsgConvertERC20Response$Type()
/**
 * @generated ServiceType for protobuf service evmos.erc20.v1.Msg
 */
export const Msg = new ServiceType('evmos.erc20.v1.Msg', [
  {
    name: 'ConvertCoin',
    options: { 'google.api.http': { get: '/evmos/erc20/v1/tx/convert_coin' } },
    I: MsgConvertCoin,
    O: MsgConvertCoinResponse,
  },
  {
    name: 'ConvertERC20',
    options: { 'google.api.http': { get: '/evmos/erc20/v1/tx/convert_erc20' } },
    I: MsgConvertERC20,
    O: MsgConvertERC20Response,
  },
])
