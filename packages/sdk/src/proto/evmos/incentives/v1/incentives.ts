// @ts-nocheck
// @generated by protobuf-ts 2.5.0 with parameter long_type_string
// @generated from protobuf file "evmos/incentives/v1/incentives.proto" (package "evmos.incentives.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MESSAGE_TYPE } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'
import { Timestamp } from '../../../google/protobuf/timestamp'
import { DecCoin } from '../../../cosmos/base/v1beta1/coin'
/**
 * Incentive defines an instance that organizes distribution conditions for a
 * given smart contract
 *
 * @generated from protobuf messages evmos.incentives.v1.Incentive
 */
export interface Incentive {
  /**
   * contract address
   *
   * @generated from protobuf field: string contract = 1;
   */
  contract: string
  /**
   * denoms and percentage of rewards to be allocated
   *
   * @generated from protobuf field: repeated cosmos.base.v1beta1.DecCoin allocations = 2;
   */
  allocations: DecCoin[]
  /**
   * number of remaining epochs
   *
   * @generated from protobuf field: uint32 epochs = 3;
   */
  epochs: number
  /**
   * distribution start time
   *
   * @generated from protobuf field: google.protobuf.Timestamp start_time = 4;
   */
  startTime?: Timestamp
  /**
   * cumulative gas spent by all gasmeters of the incentive during the epoch
   *
   * @generated from protobuf field: uint64 total_gas = 5;
   */
  totalGas: string
}
/**
 * GasMeter tracks the cumulative gas spent per participant in one epoch
 *
 * @generated from protobuf messages evmos.incentives.v1.GasMeter
 */
export interface GasMeter {
  /**
   * hex address of the incentivized contract
   *
   * @generated from protobuf field: string contract = 1;
   */
  contract: string
  /**
   * participant address that interacts with the incentive
   *
   * @generated from protobuf field: string participant = 2;
   */
  participant: string
  /**
   * cumulative gas spent during the epoch
   *
   * @generated from protobuf field: uint64 cumulative_gas = 3;
   */
  cumulativeGas: string
}
/**
 * RegisterIncentiveProposal is a gov Content type to register an incentive
 *
 * @generated from protobuf messages evmos.incentives.v1.RegisterIncentiveProposal
 */
export interface RegisterIncentiveProposal {
  /**
   * title of the proposal
   *
   * @generated from protobuf field: string title = 1;
   */
  title: string
  /**
   * proposal description
   *
   * @generated from protobuf field: string description = 2;
   */
  description: string
  /**
   * contract address
   *
   * @generated from protobuf field: string contract = 3;
   */
  contract: string
  /**
   * denoms and percentage of rewards to be allocated
   *
   * @generated from protobuf field: repeated cosmos.base.v1beta1.DecCoin allocations = 4;
   */
  allocations: DecCoin[]
  /**
   * number of remaining epochs
   *
   * @generated from protobuf field: uint32 epochs = 5;
   */
  epochs: number
}
/**
 * CancelIncentiveProposal is a gov Content type to cancel an incentive
 *
 * @generated from protobuf messages evmos.incentives.v1.CancelIncentiveProposal
 */
export interface CancelIncentiveProposal {
  /**
   * title of the proposal
   *
   * @generated from protobuf field: string title = 1;
   */
  title: string
  /**
   * proposal description
   *
   * @generated from protobuf field: string description = 2;
   */
  description: string
  /**
   * contract address
   *
   * @generated from protobuf field: string contract = 3;
   */
  contract: string
}
// @generated messages type with reflection information, may provide speed optimized methods
class Incentive$Type extends MessageType<Incentive> {
  constructor() {
    super('evmos.incentives.v1.Incentive', [
      { no: 1, name: 'contract', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: 'allocations',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => DecCoin,
        options: {
          'gogoproto.nullable': false,
          'gogoproto.castrepeated':
            'github.com/cosmos/cosmos-sdk/types.DecCoins',
        },
      },
      { no: 3, name: 'epochs', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
      {
        no: 4,
        name: 'start_time',
        kind: 'message',
        T: () => Timestamp,
        options: { 'gogoproto.nullable': false, 'gogoproto.stdtime': true },
      },
      { no: 5, name: 'total_gas', kind: 'scalar', T: 4 /*ScalarType.UINT64*/ },
    ])
  }
  create(value?: PartialMessage<Incentive>): Incentive {
    const message = { contract: '', allocations: [], epochs: 0, totalGas: '0' }
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    })
    if (value !== undefined)
      reflectionMergePartial<Incentive>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Incentive,
  ): Incentive {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* string contract */ 1:
          message.contract = reader.string()
          break
        case /* repeated cosmos.base.v1beta1.DecCoin allocations */ 2:
          message.allocations.push(
            DecCoin.internalBinaryRead(reader, reader.uint32(), options),
          )
          break
        case /* uint32 epochs */ 3:
          message.epochs = reader.uint32()
          break
        case /* google.protobuf.Timestamp start_time */ 4:
          message.startTime = Timestamp.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.startTime,
          )
          break
        case /* uint64 total_gas */ 5:
          message.totalGas = reader.uint64().toString()
          break
        default:
          let u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: Incentive,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string contract = 1; */
    if (message.contract !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.contract)
    /* repeated cosmos.base.v1beta1.DecCoin allocations = 2; */
    for (let i = 0; i < message.allocations.length; i++)
      DecCoin.internalBinaryWrite(
        message.allocations[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join()
    /* uint32 epochs = 3; */
    if (message.epochs !== 0)
      writer.tag(3, WireType.Varint).uint32(message.epochs)
    /* google.protobuf.Timestamp start_time = 4; */
    if (message.startTime)
      Timestamp.internalBinaryWrite(
        message.startTime,
        writer.tag(4, WireType.LengthDelimited).fork(),
        options,
      ).join()
    /* uint64 total_gas = 5; */
    if (message.totalGas !== '0')
      writer.tag(5, WireType.Varint).uint64(message.totalGas)
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf messages evmos.incentives.v1.Incentive
 */
export const Incentive = new Incentive$Type()
// @generated messages type with reflection information, may provide speed optimized methods
class GasMeter$Type extends MessageType<GasMeter> {
  constructor() {
    super('evmos.incentives.v1.GasMeter', [
      { no: 1, name: 'contract', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: 'participant',
        kind: 'scalar',
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 3,
        name: 'cumulative_gas',
        kind: 'scalar',
        T: 4 /*ScalarType.UINT64*/,
      },
    ])
  }
  create(value?: PartialMessage<GasMeter>): GasMeter {
    const message = { contract: '', participant: '', cumulativeGas: '0' }
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    })
    if (value !== undefined)
      reflectionMergePartial<GasMeter>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GasMeter,
  ): GasMeter {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* string contract */ 1:
          message.contract = reader.string()
          break
        case /* string participant */ 2:
          message.participant = reader.string()
          break
        case /* uint64 cumulative_gas */ 3:
          message.cumulativeGas = reader.uint64().toString()
          break
        default:
          let u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: GasMeter,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string contract = 1; */
    if (message.contract !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.contract)
    /* string participant = 2; */
    if (message.participant !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.participant)
    /* uint64 cumulative_gas = 3; */
    if (message.cumulativeGas !== '0')
      writer.tag(3, WireType.Varint).uint64(message.cumulativeGas)
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf messages evmos.incentives.v1.GasMeter
 */
export const GasMeter = new GasMeter$Type()
// @generated messages type with reflection information, may provide speed optimized methods
class RegisterIncentiveProposal$Type extends MessageType<RegisterIncentiveProposal> {
  constructor() {
    super(
      'evmos.incentives.v1.RegisterIncentiveProposal',
      [
        { no: 1, name: 'title', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
        {
          no: 2,
          name: 'description',
          kind: 'scalar',
          T: 9 /*ScalarType.STRING*/,
        },
        { no: 3, name: 'contract', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
        {
          no: 4,
          name: 'allocations',
          kind: 'message',
          repeat: 1 /*RepeatType.PACKED*/,
          T: () => DecCoin,
          options: {
            'gogoproto.nullable': false,
            'gogoproto.castrepeated':
              'github.com/cosmos/cosmos-sdk/types.DecCoins',
          },
        },
        { no: 5, name: 'epochs', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
      ],
      { 'gogoproto.equal': false },
    )
  }
  create(
    value?: PartialMessage<RegisterIncentiveProposal>,
  ): RegisterIncentiveProposal {
    const message = {
      title: '',
      description: '',
      contract: '',
      allocations: [],
      epochs: 0,
    }
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    })
    if (value !== undefined)
      reflectionMergePartial<RegisterIncentiveProposal>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: RegisterIncentiveProposal,
  ): RegisterIncentiveProposal {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* string title */ 1:
          message.title = reader.string()
          break
        case /* string description */ 2:
          message.description = reader.string()
          break
        case /* string contract */ 3:
          message.contract = reader.string()
          break
        case /* repeated cosmos.base.v1beta1.DecCoin allocations */ 4:
          message.allocations.push(
            DecCoin.internalBinaryRead(reader, reader.uint32(), options),
          )
          break
        case /* uint32 epochs */ 5:
          message.epochs = reader.uint32()
          break
        default:
          let u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: RegisterIncentiveProposal,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string title = 1; */
    if (message.title !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.title)
    /* string description = 2; */
    if (message.description !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.description)
    /* string contract = 3; */
    if (message.contract !== '')
      writer.tag(3, WireType.LengthDelimited).string(message.contract)
    /* repeated cosmos.base.v1beta1.DecCoin allocations = 4; */
    for (let i = 0; i < message.allocations.length; i++)
      DecCoin.internalBinaryWrite(
        message.allocations[i],
        writer.tag(4, WireType.LengthDelimited).fork(),
        options,
      ).join()
    /* uint32 epochs = 5; */
    if (message.epochs !== 0)
      writer.tag(5, WireType.Varint).uint32(message.epochs)
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf messages evmos.incentives.v1.RegisterIncentiveProposal
 */
export const RegisterIncentiveProposal = new RegisterIncentiveProposal$Type()
// @generated messages type with reflection information, may provide speed optimized methods
class CancelIncentiveProposal$Type extends MessageType<CancelIncentiveProposal> {
  constructor() {
    super(
      'evmos.incentives.v1.CancelIncentiveProposal',
      [
        { no: 1, name: 'title', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
        {
          no: 2,
          name: 'description',
          kind: 'scalar',
          T: 9 /*ScalarType.STRING*/,
        },
        { no: 3, name: 'contract', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      ],
      { 'gogoproto.equal': false },
    )
  }
  create(
    value?: PartialMessage<CancelIncentiveProposal>,
  ): CancelIncentiveProposal {
    const message = { title: '', description: '', contract: '' }
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    })
    if (value !== undefined)
      reflectionMergePartial<CancelIncentiveProposal>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CancelIncentiveProposal,
  ): CancelIncentiveProposal {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* string title */ 1:
          message.title = reader.string()
          break
        case /* string description */ 2:
          message.description = reader.string()
          break
        case /* string contract */ 3:
          message.contract = reader.string()
          break
        default:
          let u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: CancelIncentiveProposal,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string title = 1; */
    if (message.title !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.title)
    /* string description = 2; */
    if (message.description !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.description)
    /* string contract = 3; */
    if (message.contract !== '')
      writer.tag(3, WireType.LengthDelimited).string(message.contract)
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf messages evmos.incentives.v1.CancelIncentiveProposal
 */
export const CancelIncentiveProposal = new CancelIncentiveProposal$Type()
