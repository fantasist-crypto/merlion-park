// @ts-nocheck
// @generated by protobuf-ts 2.5.0 with parameter long_type_string
// @generated from protobuf file "evmos/incentives/v1/genesis.proto" (package "evmos.incentives.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MESSAGE_TYPE } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'
import { GasMeter } from './incentives'
import { Incentive } from './incentives'
/**
 * GenesisState defines the module's genesis state.
 *
 * @generated from protobuf messages evmos.incentives.v1.GenesisState
 */
export interface GenesisState {
  /**
   * module parameters
   *
   * @generated from protobuf field: evmos.incentives.v1.Params params = 1;
   */
  params?: Params
  /**
   * active incentives
   *
   * @generated from protobuf field: repeated evmos.incentives.v1.Incentive incentives = 2;
   */
  incentives: Incentive[]
  /**
   * active Gasmeters
   *
   * @generated from protobuf field: repeated evmos.incentives.v1.GasMeter gas_meters = 3;
   */
  gasMeters: GasMeter[]
}
/**
 * Params defines the incentives module params
 *
 * @generated from protobuf messages evmos.incentives.v1.Params
 */
export interface Params {
  /**
   * parameter to enable incentives
   *
   * @generated from protobuf field: bool enable_incentives = 1;
   */
  enableIncentives: boolean
  /**
   * maximum percentage an incentive can allocate per denomination
   *
   * @generated from protobuf field: string allocation_limit = 2;
   */
  allocationLimit: string
  /**
   * identifier for the epochs module hooks
   *
   * @generated from protobuf field: string incentives_epoch_identifier = 3;
   */
  incentivesEpochIdentifier: string
  /**
   * scaling factor for capping rewards
   *
   * @generated from protobuf field: string reward_scaler = 4;
   */
  rewardScaler: string
}
// @generated messages type with reflection information, may provide speed optimized methods
class GenesisState$Type extends MessageType<GenesisState> {
  constructor() {
    super('evmos.incentives.v1.GenesisState', [
      {
        no: 1,
        name: 'params',
        kind: 'message',
        T: () => Params,
        options: { 'gogoproto.nullable': false },
      },
      {
        no: 2,
        name: 'incentives',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => Incentive,
        options: { 'gogoproto.nullable': false },
      },
      {
        no: 3,
        name: 'gas_meters',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => GasMeter,
        options: { 'gogoproto.nullable': false },
      },
    ])
  }
  create(value?: PartialMessage<GenesisState>): GenesisState {
    const message = { incentives: [], gasMeters: [] }
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    })
    if (value !== undefined)
      reflectionMergePartial<GenesisState>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GenesisState,
  ): GenesisState {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* evmos.incentives.v1.Params params */ 1:
          message.params = Params.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.params,
          )
          break
        case /* repeated evmos.incentives.v1.Incentive incentives */ 2:
          message.incentives.push(
            Incentive.internalBinaryRead(reader, reader.uint32(), options),
          )
          break
        case /* repeated evmos.incentives.v1.GasMeter gas_meters */ 3:
          message.gasMeters.push(
            GasMeter.internalBinaryRead(reader, reader.uint32(), options),
          )
          break
        default:
          let u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: GenesisState,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* evmos.incentives.v1.Params params = 1; */
    if (message.params)
      Params.internalBinaryWrite(
        message.params,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join()
    /* repeated evmos.incentives.v1.Incentive incentives = 2; */
    for (let i = 0; i < message.incentives.length; i++)
      Incentive.internalBinaryWrite(
        message.incentives[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join()
    /* repeated evmos.incentives.v1.GasMeter gas_meters = 3; */
    for (let i = 0; i < message.gasMeters.length; i++)
      GasMeter.internalBinaryWrite(
        message.gasMeters[i],
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join()
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf messages evmos.incentives.v1.GenesisState
 */
export const GenesisState = new GenesisState$Type()
// @generated messages type with reflection information, may provide speed optimized methods
class Params$Type extends MessageType<Params> {
  constructor() {
    super('evmos.incentives.v1.Params', [
      {
        no: 1,
        name: 'enable_incentives',
        kind: 'scalar',
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 2,
        name: 'allocation_limit',
        kind: 'scalar',
        T: 9 /*ScalarType.STRING*/,
        options: {
          'gogoproto.nullable': false,
          'gogoproto.customtype': 'github.com/cosmos/cosmos-sdk/types.Dec',
        },
      },
      {
        no: 3,
        name: 'incentives_epoch_identifier',
        kind: 'scalar',
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 4,
        name: 'reward_scaler',
        kind: 'scalar',
        T: 9 /*ScalarType.STRING*/,
        options: {
          'gogoproto.nullable': false,
          'gogoproto.customtype': 'github.com/cosmos/cosmos-sdk/types.Dec',
        },
      },
    ])
  }
  create(value?: PartialMessage<Params>): Params {
    const message = {
      enableIncentives: false,
      allocationLimit: '',
      incentivesEpochIdentifier: '',
      rewardScaler: '',
    }
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    })
    if (value !== undefined)
      reflectionMergePartial<Params>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Params,
  ): Params {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* bool enable_incentives */ 1:
          message.enableIncentives = reader.bool()
          break
        case /* string allocation_limit */ 2:
          message.allocationLimit = reader.string()
          break
        case /* string incentives_epoch_identifier */ 3:
          message.incentivesEpochIdentifier = reader.string()
          break
        case /* string reward_scaler */ 4:
          message.rewardScaler = reader.string()
          break
        default:
          let u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: Params,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* bool enable_incentives = 1; */
    if (message.enableIncentives !== false)
      writer.tag(1, WireType.Varint).bool(message.enableIncentives)
    /* string allocation_limit = 2; */
    if (message.allocationLimit !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.allocationLimit)
    /* string incentives_epoch_identifier = 3; */
    if (message.incentivesEpochIdentifier !== '')
      writer
        .tag(3, WireType.LengthDelimited)
        .string(message.incentivesEpochIdentifier)
    /* string reward_scaler = 4; */
    if (message.rewardScaler !== '')
      writer.tag(4, WireType.LengthDelimited).string(message.rewardScaler)
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf messages evmos.incentives.v1.Params
 */
export const Params = new Params$Type()
