// @ts-nocheck
// @generated by protobuf-ts 2.5.0 with parameter long_type_string
// @generated from protobuf file "evmos/epochs/v1/query.proto" (package "evmos.epochs.v1", syntax proto3)
// tslint:disable
import { ServiceType } from '@protobuf-ts/runtime-rpc'
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MESSAGE_TYPE } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'
import { PageResponse } from '../../../cosmos/base/query/v1beta1/pagination'
import { EpochInfo } from './genesis'
import { PageRequest } from '../../../cosmos/base/query/v1beta1/pagination'
/**
 * @generated from protobuf messages evmos.epochs.v1.QueryEpochsInfoRequest
 */
export interface QueryEpochsInfoRequest {
  /**
   * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest
}
/**
 * @generated from protobuf messages evmos.epochs.v1.QueryEpochsInfoResponse
 */
export interface QueryEpochsInfoResponse {
  /**
   * @generated from protobuf field: repeated evmos.epochs.v1.EpochInfo epochs = 1;
   */
  epochs: EpochInfo[]
  /**
   * @generated from protobuf field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse
}
/**
 * @generated from protobuf messages evmos.epochs.v1.QueryCurrentEpochRequest
 */
export interface QueryCurrentEpochRequest {
  /**
   * @generated from protobuf field: string identifier = 1;
   */
  identifier: string
}
/**
 * @generated from protobuf messages evmos.epochs.v1.QueryCurrentEpochResponse
 */
export interface QueryCurrentEpochResponse {
  /**
   * @generated from protobuf field: int64 current_epoch = 1;
   */
  currentEpoch: string
}
// @generated messages type with reflection information, may provide speed optimized methods
class QueryEpochsInfoRequest$Type extends MessageType<QueryEpochsInfoRequest> {
  constructor() {
    super('evmos.epochs.v1.QueryEpochsInfoRequest', [
      { no: 1, name: 'pagination', kind: 'message', T: () => PageRequest },
    ])
  }
  create(
    value?: PartialMessage<QueryEpochsInfoRequest>,
  ): QueryEpochsInfoRequest {
    const message = {}
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    })
    if (value !== undefined)
      reflectionMergePartial<QueryEpochsInfoRequest>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: QueryEpochsInfoRequest,
  ): QueryEpochsInfoRequest {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* cosmos.base.query.v1beta1.PageRequest pagination */ 1:
          message.pagination = PageRequest.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.pagination,
          )
          break
        default:
          let u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: QueryEpochsInfoRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* cosmos.base.query.v1beta1.PageRequest pagination = 1; */
    if (message.pagination)
      PageRequest.internalBinaryWrite(
        message.pagination,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join()
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf messages evmos.epochs.v1.QueryEpochsInfoRequest
 */
export const QueryEpochsInfoRequest = new QueryEpochsInfoRequest$Type()
// @generated messages type with reflection information, may provide speed optimized methods
class QueryEpochsInfoResponse$Type extends MessageType<QueryEpochsInfoResponse> {
  constructor() {
    super('evmos.epochs.v1.QueryEpochsInfoResponse', [
      {
        no: 1,
        name: 'epochs',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => EpochInfo,
        options: { 'gogoproto.nullable': false },
      },
      { no: 2, name: 'pagination', kind: 'message', T: () => PageResponse },
    ])
  }
  create(
    value?: PartialMessage<QueryEpochsInfoResponse>,
  ): QueryEpochsInfoResponse {
    const message = { epochs: [] }
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    })
    if (value !== undefined)
      reflectionMergePartial<QueryEpochsInfoResponse>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: QueryEpochsInfoResponse,
  ): QueryEpochsInfoResponse {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* repeated evmos.epochs.v1.EpochInfo epochs */ 1:
          message.epochs.push(
            EpochInfo.internalBinaryRead(reader, reader.uint32(), options),
          )
          break
        case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
          message.pagination = PageResponse.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.pagination,
          )
          break
        default:
          let u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: QueryEpochsInfoResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated evmos.epochs.v1.EpochInfo epochs = 1; */
    for (let i = 0; i < message.epochs.length; i++)
      EpochInfo.internalBinaryWrite(
        message.epochs[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join()
    /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
    if (message.pagination)
      PageResponse.internalBinaryWrite(
        message.pagination,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join()
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf messages evmos.epochs.v1.QueryEpochsInfoResponse
 */
export const QueryEpochsInfoResponse = new QueryEpochsInfoResponse$Type()
// @generated messages type with reflection information, may provide speed optimized methods
class QueryCurrentEpochRequest$Type extends MessageType<QueryCurrentEpochRequest> {
  constructor() {
    super('evmos.epochs.v1.QueryCurrentEpochRequest', [
      { no: 1, name: 'identifier', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ])
  }
  create(
    value?: PartialMessage<QueryCurrentEpochRequest>,
  ): QueryCurrentEpochRequest {
    const message = { identifier: '' }
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    })
    if (value !== undefined)
      reflectionMergePartial<QueryCurrentEpochRequest>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: QueryCurrentEpochRequest,
  ): QueryCurrentEpochRequest {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* string identifier */ 1:
          message.identifier = reader.string()
          break
        default:
          let u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: QueryCurrentEpochRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string identifier = 1; */
    if (message.identifier !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.identifier)
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf messages evmos.epochs.v1.QueryCurrentEpochRequest
 */
export const QueryCurrentEpochRequest = new QueryCurrentEpochRequest$Type()
// @generated messages type with reflection information, may provide speed optimized methods
class QueryCurrentEpochResponse$Type extends MessageType<QueryCurrentEpochResponse> {
  constructor() {
    super('evmos.epochs.v1.QueryCurrentEpochResponse', [
      {
        no: 1,
        name: 'current_epoch',
        kind: 'scalar',
        T: 3 /*ScalarType.INT64*/,
      },
    ])
  }
  create(
    value?: PartialMessage<QueryCurrentEpochResponse>,
  ): QueryCurrentEpochResponse {
    const message = { currentEpoch: '0' }
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    })
    if (value !== undefined)
      reflectionMergePartial<QueryCurrentEpochResponse>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: QueryCurrentEpochResponse,
  ): QueryCurrentEpochResponse {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* int64 current_epoch */ 1:
          message.currentEpoch = reader.int64().toString()
          break
        default:
          let u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: QueryCurrentEpochResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* int64 current_epoch = 1; */
    if (message.currentEpoch !== '0')
      writer.tag(1, WireType.Varint).int64(message.currentEpoch)
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf messages evmos.epochs.v1.QueryCurrentEpochResponse
 */
export const QueryCurrentEpochResponse = new QueryCurrentEpochResponse$Type()
/**
 * @generated ServiceType for protobuf service evmos.epochs.v1.Query
 */
export const Query = new ServiceType('evmos.epochs.v1.Query', [
  {
    name: 'EpochInfos',
    options: { 'google.api.http': { get: '/evmos/epochs/v1/epochs' } },
    I: QueryEpochsInfoRequest,
    O: QueryEpochsInfoResponse,
  },
  {
    name: 'CurrentEpoch',
    options: { 'google.api.http': { get: '/evmos/epochs/v1/current_epoch' } },
    I: QueryCurrentEpochRequest,
    O: QueryCurrentEpochResponse,
  },
])
